import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
import numpy as np
import textwrap
import random
import requests
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '–í–ê–®_TELEGRAM_TOKEN'
ADMIN_ID = 123456789  # –í–∞—à ID –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
users_db = {}
styles_db = {
    1: {"name": "–°–æ–≤–µ—Ç—Å–∫–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞", "desc": "–Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, —Å–æ—Ü—Ä–µ–∞–ª–∏–∑–º", "price": 0},
    2: {"name": "–í–∏–Ω—Ç–∞–∂–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "desc": "–ß/–ë —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å—Ç–∞—Ä–µ–Ω–∏—è", "price": 0},
    3: {"name": "–ö–∏–Ω–æ–∞—Ñ–∏—à–∞ 60-—Ö", "desc": "–ì—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ-–ø–æ—Å—Ç–µ—Ä–æ–≤", "price": 0},
    4: {"name": "–î–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –†–æ—Å—Å–∏—è", "desc": "–°–µ–ø—è, –∫–∞—Ä—Ç–æ–Ω–∫–∞, –≤–∏–Ω—å–µ—Ç–∫–∏", "price": 1},
    5: {"name": "–¶–≤–µ—Ç–Ω–∞—è –ø–ª–µ–Ω–∫–∞ 80-—Ö", "desc": "–í—ã—Ü–≤–µ—Ç—à–∏–µ —Ü–≤–µ—Ç–∞, –∑–µ—Ä–Ω–æ", "price": 1}
}

class UserState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_style = State()
    waiting_for_text = State()

def apply_soviet_style(image):
    """–°—Ç–∏–ª—å —Å–æ–≤–µ—Ç—Å–∫–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏"""
    # –£—Å–∏–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
    enhancer = ImageEnhance.Color(image)
    image = enhancer.enhance(1.8)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –±—É–º–∞–≥–∏
    texture = Image.open('textures/paper.jpg').convert("RGBA").resize(image.size)
    image = Image.blend(image.convert("RGBA"), texture, 0.2)
    
    # –≠—Ñ—Ñ–µ–∫—Ç –ª–µ–≥–∫–æ–π —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏
    image = image.filter(ImageFilter.GaussianBlur(0.8))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –≤–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    vignette = Image.open('effects/vignette.png').convert("RGBA").resize(image.size)
    image = Image.alpha_composite(image.convert("RGBA"), vignette)
    
    return image

def apply_vintage_style(image):
    """–ß/–ë –≤–∏–Ω—Ç–∞–∂–Ω—ã–π —Å—Ç–∏–ª—å"""
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á/–± —Å —Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    image = image.convert("L")
    image = ImageOps.colorize(image, '#3a1f00', '#e0c78c')
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω
    scratches = Image.open('effects/scratches.png').convert("RGBA").resize(image.size)
    image = image.convert("RGBA")
    image.alpha_composite(scratches)
    
    # –≠—Ñ—Ñ–µ–∫—Ç –∑–µ—Ä–Ω–∞
    grain = np.random.normal(0, 25, (image.size[1], image.size[0], 3))
    grain_img = Image.fromarray(np.uint8(grain)).convert("RGBA")
    image = Image.blend(image, grain_img, 0.1)
    
    return image

def apply_cinema_style(image, text=""):
    """–°—Ç–∏–ª—å –∫–∏–Ω–æ–∞—Ñ–∏—à–∏ 60-—Ö"""
    # –Ø—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
    image = image.convert("RGB")
    r, g, b = image.split()
    r = r.point(lambda x: min(x + 50, 255))
    b = b.point(lambda x: max(x - 30, 0))
    image = Image.merge("RGB", (r, g, b))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ
    if text:
        draw = ImageDraw.Draw(image)
        font = ImageFont.truetype("fonts/retro.ttf", 80)
        
        # –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        wrapped_text = textwrap.wrap(text, width=15)
        y_position = 50
        
        for line in wrapped_text:
            bbox = draw.textbbox((0, 0), line, font=font)
            text_width = bbox[2] - bbox[0]
            x = (image.width - text_width) // 2
            draw.text((x, y_position), line, font=font, fill="yellow", stroke_width=3, stroke_fill="black")
            y_position += 90
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–º–∫–∏
    border = Image.open('effects/cinema_border.png').convert("RGBA").resize(image.size)
    image = image.convert("RGBA")
    image.alpha_composite(border)
    
    return image

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ...

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    users_db[user_id] = {"credits": 5, "processed": 0}
    
    text = (
        "üì∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NostalgiaBot!*\n\n"
        "–Ø –ø—Ä–µ–≤—Ä–∞—â–∞—é –≤–∞—à–∏ —Ñ–æ—Ç–æ –≤ —Ä–µ—Ç—Ä–æ-—à–µ–¥–µ–≤—Ä—ã:\n"
        "‚Ä¢ –°–æ–≤–µ—Ç—Å–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç–∫–∏\n"
        "‚Ä¢ –í–∏–Ω—Ç–∞–∂–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "‚Ä¢ –†–µ—Ç—Ä–æ-–ø–æ—Å—Ç–µ—Ä—ã\n\n"
        "üîÆ _–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å_"
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å", callback_data="choose_style"))
    keyboard.add(InlineKeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã", callback_data="free_credits"))
    
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'choose_style')
async def process_choose_style(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for style_id, style in styles_db.items():
        btn_text = f"{style['name']} {'üîì' if style['price'] == 0 else 'üîí'}"
        keyboard.insert(InlineKeyboardButton(btn_text, callback_data=f"style_{style_id}"))
    
    await bot.send_message(
        callback_query.from_user.id,
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data.startswith('style_'))
async def process_style_selection(callback_query: types.CallbackQuery, state: FSMContext):
    style_id = int(callback_query.data.split('_')[1])
    style = styles_db[style_id]
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    if style['price'] > 0 and (user_id not in users_db or users_db[user_id]['credits'] < style['price']):
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!",
            show_alert=True
        )
        return
    
    async with state.proxy() as data:
        data['style_id'] = style_id
    
    # –î–ª—è —Å—Ç–∏–ª–µ–π —Å —Ç–µ–∫—Ç–æ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥
    if style_id == 3:  # –ö–∏–Ω–æ–∞—Ñ–∏—à–∞
        await bot.send_message(
            callback_query.from_user.id,
            "üé¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞—Ñ–∏—à–∏ (–º–∞–∫—Å. 40 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        await UserState.waiting_for_text.set()
    else:
        await bot.send_message(
            callback_query.from_user.id,
            f"üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–ª—è: *{style['name']}*\n\n{style['desc']}",
            parse_mode="Markdown"
        )
        await UserState.waiting_for_photo.set()

@dp.message_handler(state=UserState.waiting_for_text)
async def process_text_input(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text[:40]
    
    await message.answer(
        f"üìù –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: *{message.text[:40]}*\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        parse_mode="Markdown"
    )
    await UserState.waiting_for_photo.set()

@dp.message_handler(content_types=types.ContentType.PHOTO, state=UserState.waiting_for_photo)
async def process_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with state.proxy() as data:
        style_id = data.get('style_id', 1)
        text = data.get('text', "")
    
    style = styles_db[style_id]
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file.file_path}"
    
    response = requests.get(file_url)
    image = Image.open(BytesIO(response.content))
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è
    await message.answer("ü™Ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        if style_id == 1:
            result = apply_soviet_style(image)
        elif style_id == 2:
            result = apply_vintage_style(image)
        elif style_id == 3:
            result = apply_cinema_style(image, text)
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏...
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output = BytesIO()
        result.save(output, format='PNG')
        output.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await message.answer_photo(
            output,
            caption=f"‚ú® –í–∞—à–µ —Ñ–æ—Ç–æ –≤ —Å—Ç–∏–ª–µ: *{style['name']}*",
            parse_mode="Markdown"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if user_id in users_db:
            users_db[user_id]['processed'] += 1
            if style['price'] > 0:
                users_db[user_id]['credits'] -= style['price']
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Instagram", url="https://instagram.com"))
        keyboard.add(InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="choose_style"))
        
        await message.answer(
            "‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!",
            reply_markup=keyboard
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'free_credits')
async def process_free_credits(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
    if users_db.get(user_id, {}).get('last_bonus') == str(datetime.date.today()):
        await bot.answer_callback_query(
            callback_query.id,
            "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!",
            show_alert=True
        )
        return
    
    # –í—ã–¥–∞—á–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
    if user_id not in users_db:
        users_db[user_id] = {"credits": 10, "processed": 0, "last_bonus": str(datetime.date.today())}
    else:
        users_db[user_id]['credits'] += 5
        users_db[user_id]['last_bonus'] = str(datetime.date.today())
    
    await bot.send_message(
        user_id,
        f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ +5 –∫—Ä–µ–¥–∏—Ç–æ–≤!\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: *{users_db[user_id]['credits']}* ü™ô",
        parse_mode="Markdown"
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message_handler(commands=['stats'])
async def cmd_stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    total_users = len(users_db)
    total_processed = sum([u['processed'] for u in users_db.values()])
    
    text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üñº –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ: {total_processed}\n"
        f"ü™ô –í—ã–¥–∞–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: {sum([u.get('credits', 0) for u in users_db.values()])}"
    )
    
    await message.answer(text, parse_mode="Markdown")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs('textures', exist_ok=True)
    os.makedirs('effects', exist_ok=True)
    os.makedirs('fonts', exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã)
    if not os.path.exists('textures/paper.jpg'):
        open('textures/paper.jpg', 'wb').write(requests.get('https://example.com/paper.jpg').content)
    
    executor.start_polling(dp, skip_updates=True)
